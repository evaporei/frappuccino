// Generated by CoffeeScript 2.4.1
(function() {
  var FULFILLED, PENDING, Promise, REJECTED;

  PENDING = 'PENDING';

  FULFILLED = 'FULFILLED';

  REJECTED = 'REJECTED';

  Promise = class Promise {
    constructor(executor) {
      this.fulfill = this.fulfill.bind(this);
      this.reject = this.reject.bind(this);
      this.state = PENDING;
      this.called = false;
      this.queue = [];
      this.doResolve(executor);
    }

    doResolve(executor) {
      var error;
      try {
        return executor(this.fulfill, this.reject);
      } catch (error1) {
        error = error1;
        return this.reject(error);
      }
    }

    fulfill(value) {
      if (this.called) {
        return;
      }
      this.called = true;
      this.state = FULFILLED;
      this.value = value;
      return this.finale();
    }

    reject(reason) {
      if (this.called) {
        return;
      }
      this.called = true;
      this.state = REJECTED;
      this.value = reason;
      return this.finale();
    }

    finale() {
      var callbacks, i, len, ref, results;
      ref = this.queue;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        callbacks = ref[i];
        results.push(this.handle(callbacks));
      }
      return results;
    }

    handle({onFulfilled, onRejected}) {
      return (this.state === FULFILLED ? onFulfilled : onRejected)(this.value);
    }

    then(onFulfilled, onRejected) {
      var callbacks;
      callbacks = {onFulfilled, onRejected};
      if (this.state === PENDING) {
        return this.queue.push(callbacks);
      } else {
        return this.handle(callbacks);
      }
    }

  };

  module.exports = Promise;

}).call(this);
